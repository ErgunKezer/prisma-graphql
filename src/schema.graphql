type Query {
  comments(query: String): [Comment!]!
  users(query: String): [User!]!
  posts(query: String): [Post!]!
}

type Mutation {
  createUser(data: CreateUserInput): User!
  deleteUser(id: ID!): User!
  updateUser(id: ID!, data: UpdateUserInput): User!
  createPost(data: CreatePostInput): Post!
  deletePost(id: ID!): Post!
  updatePost(id: ID!, data: UpdatePostInput): Post!
  createComment(data: CreateCommentInput): Comment!
  deleteComment(id: ID!): Comment!
  updateComment(id: ID!, data: UpdateComment): Comment!
}

type Subscription {
  comment(postId: ID): CommentSubscriptionPayload!
  post(authorId: ID): PostSubscriptionPayload!
}

# inputs
input CreateUserInput {
  name: String!
  email: String!
}
input UpdateUserInput {
  name: String
  email: String
}
input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
  author: ID!
}
input UpdatePostInput {
  title: String
  body: String
  published: Boolean
}
input CreateCommentInput {
  text: String!
  author: ID!
  post: ID!
}
input UpdateComment {
  text: String
}

# Custom types
type User {
  id: ID!
  name: String!
  email: String!
  posts: [Post!]!
  comments: [Comment!]!
}
type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}
type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}

# Subscription Payloads
type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
}
type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
}

# enums
# enums are string
enum MutationType {
  CREATED
  UPDATED
  DELETED
}
